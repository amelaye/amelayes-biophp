@startuml

package "Factory" #DDDDDD {
    abstract DatabaseReaderFactory {
        + {static} readDatabase($sType, $aFlines)
    }


    abstract DatabaseRecorderFactory {
        + {static} bool getEntryStart($sType, $sLinestr)
        + {static} string getEntryId($sType, $flines, $linestr)
    }
}

class DatabaseManager implements DatabaseInterface {
    # EntityManager $em
    + __construct(EntityManagerInterface $em)
    + fetch($sSeqId)
    + recording()
    - atEntrystart($linestr, $dbformat)
    - getEntryid(&$flines, $linestr, $dbformat)
}


interface ParseDatabaseInterface {
    + __construct()
    + void parseDataFile($aFlines)
}

class ParseGenbankManager extends ParseDbAbstractManager {
    - array $aLines
    + parseDataFile($aFlines)
    - parseReferences($aFlines)
    - seekReferences(&$sReferenceProperty)
    - parseLocus()
    - parseDefinition($flines)
    - parseVersion()
    - parseKeywords()
    - parseAccession()
    - parseFeatures($aFlines, $sField)
}

class ParseSwissprotManager extends ParseDbAbstractManager

interface DatabaseInterface {
    + fetch($sSeqId)
    + recording()
}
note top of DatabaseInterface : Inject it in your controller to do your requests <3.

abstract ParseDbAbstractManager implements ParseDatabaseInterface {
    # array $accession
    # Sequence $sequence
    # array $authors
    # array $gbFeatures
    # array $keywords
    # array $references
    # SrcForm $srcForm
    # GbSequence $gbSequence
    + __construct()
    + getAccession()
    + getSequence()
    + getAuthors()
    + getGbSequence()
    + getGbFeatures()
    + getKeywords()
    + getReferences()
    + getSrcForm()
    + parseDataFile($aFlines)
}

DatabaseRecorderFactory <-- DatabaseManager
DatabaseReaderFactory <-- DatabaseManager

DatabaseReaderFactory --> ParseGenbankManager
DatabaseReaderFactory --> ParseSwissprotManager

@enduml